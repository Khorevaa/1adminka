Перем Лог;

///////////////////////////////////////////////////////////////////////////////////////////////////
// Прикладной интерфейс

Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, "Загрузить из хранилища");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, ПараметрыСистемы.ОбщиеПараметрыКоманд().КаталогХранилища);
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, ПараметрыСистемы.ОбщиеПараметрыКоманд().ПользовательХранилища);
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, ПараметрыСистемы.ОбщиеПараметрыКоманд().ПарольХранилища);
	
	ОбщиеКлючиКоманд.ДобавитьОбщиеПараметрыКоманд(Парсер, ОписаниеКоманды);
	
	Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры

// Выполняет логику команды
// 
// Параметры:
//   ПараметрыКоманды - Соответствие ключей командной строки и их значений
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды) Экспорт
	ПараметрыСистемы.Лог.Информация("Загрузка из хранилища");
	
    УправлениеКонфигуратором = ПараметрыСистемы.УправлениеКонфигуратором(); 
	УправлениеКонфигуратором.КаталогСборки(ПараметрыКоманды[ПараметрыСистемы.ОбщиеПараметрыКоманд().Каталог]);

	КаталогХранилища = ПараметрыКоманды[ПараметрыСистемы.ОбщиеПараметрыКоманд().КаталогХранилища];
	ПользовательХранилища = ПараметрыКоманды[ПараметрыСистемы.ОбщиеПараметрыКоманд().ПользовательХранилища];
	ПарольХранилища = ПараметрыКоманды[ПараметрыСистемы.ОбщиеПараметрыКоманд().ПарольХранилища];
	
	ФайлВерсии = ПолучитьВерсиюИзХранилища(КаталогХранилища);
	// УправлениеКонфигуратором.ПолучитьВерсиюИзХранилища(КаталогХранилища, ПользовательХранилища, ПарольХранилища);

	ЗагрузитьКонфигурациюИзФайла(ФайлВерсии);
	
	ПараметрыСистемы.Лог.Отладка(УправлениеКонфигуратором.ВыводКоманды());
    Возврат 0;
КонецФункции

// { приватная часть 
Функция ПолучитьВерсиюИзХранилища(Знач СтрокаСоединения)
	
	Перем ИмяФайла;
	
	ФайлХранилища = ОбъединитьПути(СтрокаСоединения, "1cv8ddb.1CD");
	// ФайлХранилища = мНастройки.ПутьКХранилищу + "\1cv8ddb.1CD";
	
	// ЭтоПоследняяМетка = Нрег(мНастройки.НомерВерсии) = НаборМеток.ПоследняяМетка;
	// Если ЭтоПоследняяМетка или Нрег(мНастройки.НомерВерсии) = НаборМеток.ПоследнийКоммит Тогда
	// 	Если ЭтоПоследняяМетка Тогда
	// 		СтрокаВерсии = НайтиПоследнююОтмеченнуюВерсию(ФайлХранилища);
	// 	Иначе	
	// 		СтрокаВерсии = НайтиПоследнююВерсию(ФайлХранилища);
	// 	КонецЕсли;
		
	// 	Если СтрокаВерсии = Неопределено Тогда
	// 		ВызватьИсключение "Не удалось обнаружить в хранилище отмеченную версию для сборки";
	// 	Иначе
	// 		Лог.Информация("Для сборки выбрана версия хранилища № " + СтрокаВерсии.НомерВерсии);
	// 		мНастройки.НомерВерсии = СтрокаВерсии.НомерВерсии;
	// 		Сообщить("##teamcity[setParameter name='metadata_version' value='"+СтрокаВерсии.ВерсияМетаданных+"']");
	// 		Сообщить("##teamcity[setParameter name='version_to_build' value='"+СтрокаВерсии.НомерВерсии+"']");
	// 	КонецЕсли;
	// Иначе
	// 	Попытка
	// 		А = Число(мНастройки.НомерВерсии);
	// 	Исключение
	// 		ВызватьИсключение "Некорректный номер версии <"+мНастройки.НомерВерсии+">";
	// 	КонецПопытки;
	// КонецЕсли;
	
	// Лог.Информация("Получение версии № " + мНастройки.НомерВерсии + " из хранилища");
	ИмяФайла = ИмяФайлаИсходниковХранилища();
	НомерВерсииХранилища = 0;

	УдалитьФайлы(ИмяФайла);
	Если ИспользоватьTool1CD() Тогда
		Лог.Отладка("Использую Tool1CD");
		
		ПутьTool1CD = ОбъединитьПути(ПараметрыСистемы.КаталогВнешнихПрограмм(), "cTool_1CD.exe");
		
		ФайлЛогаTool1CD = ПодготовитьЛогTool1CD();
		
		СтрокаЗапуска = """"+ПутьTool1CD+""" """ + ФайлХранилища + """ -l """ + ФайлЛогаTool1CD.ПолноеИмя + """ -q -ne -drc " + НомерВерсииХранилища +" """ + ИмяФайла + """";
		// СтрокаЗапуска = """"+ПутьTool1CD+""" """ + ФайлХранилища + """ -l """ + ФайлЛогаTool1CD.ПолноеИмя + """ -q -ne -drc " + мНастройки.НомерВерсии +" """ + ИмяФайла + """";
		Лог.Отладка(СтрокаЗапуска);
		ЗапуститьПриложение(СтрокаЗапуска,,Истина);
		
		ФайлИсходника = Новый Файл(ИмяФайла);
		Если Не ФайлИсходника.Существует() Тогда
			Если ФайлЛогаTool1CD.Существует() Тогда
				Лог.Отладка(ПрочитатьФайл(ФайлЛогаTool1CD.ПолноеИмя));
			КонецЕсли;
			ВызватьИсключение "Tool_1CD не выгрузил файл конфигурации.";
		КонецЕсли;
		
	Иначе
	    // УправлениеКонфигуратором = ПараметрыСистемы.УправлениеКонфигуратором(); 
		// УправлениеКонфигуратором.ПолучитьВерсиюИзХранилища(мНастройки.ПутьКХранилищу, мНастройки.ПользовательХранилища, мНастройки.ПарольХранилища, мНастройки.НомерВерсии);
		// Лог.Отладка(УправлениеКонфигуратором.ВыводКоманды());
	КонецЕсли;
	
	Возврат ИмяФайла;
	
КонецФункции

Процедура ЗагрузитьКонфигурациюИзФайла(Знач ФайлВерсии, Знач ОбновитьИБ = Истина)
	// Если мНастройки.ИспользоватьЭталон Тогда
	// 	УстановитьАдминистратораБазыВКонтекстКонфигуратора();
	// КонецЕсли;
	
	ПараметрыСистемы.УправлениеКонфигуратором().ЗагрузитьКонфигурациюИзФайла(ФайлВерсии, ОбновитьИБ);
КонецПроцедуры

Функция ИмяФайлаИсходниковХранилища(Знач ИмяФайлаПоУмолчанию = "")
	ИмяФайлаПоУмолчанию = ?(ИмяФайлаПоУмолчанию = "", "source.cf", ИмяФайлаПоУмолчанию);
	Возврат ОбъединитьПути(ПараметрыСистемы.УправлениеКонфигуратором().КаталогСборки(), ИмяФайлаПоУмолчанию);
КонецФункции

Функция ПодготовитьЛогTool1CD()
	ФайлЛогаTool1CD = Новый Файл(ПараметрыСистемы.УправлениеКонфигуратором().КаталогСборки() + "\tool1cd_log.txt");
	Если ФайлЛогаTool1CD.Существует() Тогда
		УдалитьФайлы(ФайлЛогаTool1CD.ПолноеИмя);
	КонецЕсли;
	
	Возврат ФайлЛогаTool1CD;
	
КонецФункции

Функция ПрочитатьФайл(Знач Путь)
	
	Чтение = Новый ЧтениеТекста(Путь);
	Текст = Чтение.Прочитать();
	Чтение.Закрыть();
	
	Возврат Текст;
	
КонецФункции

Функция ИспользоватьTool1CD()
	
	Возврат Истина;
	
КонецФункции

// }

Лог = ПараметрыСистемы.Лог; 
