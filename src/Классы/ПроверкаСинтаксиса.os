Перем Конфигуратор;
Перем Лог;

///////////////////////////////////////////////////////////////////////////////////////////////////
// Прикладной интерфейс

Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт
	ОбщиеКлючиКоманд.ДобавитьОбщиеПараметрыКоманд(Парсер);

	ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, "Полная проверка синтаксиса конфигурации");
	Парсер.ДобавитьПараметрКоллекцияКоманды(ОписаниеКоманды, "-mode", "Параметры синтаксических проверок (через пробел). Например, -ThinClient -WebClient -Server -ExternalConnection -ThickClientOrdinaryApplication ");

	Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры

// Выполняет логику команды
// 
// Параметры:
//   ПараметрыКоманды - Соответствие ключей командной строки и их значений
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды) Экспорт
	Лог = ПараметрыСистемы.Лог;

	Лог.Информация("Проверка синтаксиса конфигурации");

    Конфигуратор = ПараметрыСистемы.Конфигуратор(); 
	Конфигуратор.КаталогСборки(ПараметрыКоманды[ПараметрыСистемы.ОбщиеПараметрыКоманд().Каталог]);
	КоллекцияПроверок = ПараметрыКоманды["-mode"];

	ДатаНачала = ТекущаяДата();
	Успешно = Истина;
	Попытка
		ЛогПроверкиИзКонфигуратора = ПроверитьКонфигурацию(КоллекцияПроверок);
	Исключение
		ЛогПроверкиИзКонфигуратора = Конфигуратор.ВыводКоманды();
		Успешно = Ложь;		
	КонецПопытки;

	ПутьОтчетаВФорматеJUnitxml = Конфигуратор.КаталогСборки() + "\check-syntax.xml";
	Лог.Отладка("Путь к лог-файлу проверки %1", ПутьОтчетаВФорматеJUnitxml);

	ВывестиОтчетПроверкиКонфигурацииВФорматеJUnitXML(ПутьОтчетаВФорматеJUnitxml, ЛогПроверкиИзКонфигуратора, Успешно, ДатаНачала);

	Возврат ?(Успешно, 0, 1);
КонецФункции

// { приватная часть 

Функция ПроверитьКонфигурацию(Знач КоллекцияПроверок)
	
	Лог.Информация("Полная проверка конфигурации");

	РезультатПроверки = ПолучитьРезультатыСинтаксическогоКонтроля(КоллекцияПроверок);

	Лог.Информация("Результат проверки %1", РезультатПроверки);

	Возврат РезультатПроверки;
	
КонецФункции

Функция ПолучитьРезультатыСинтаксическогоКонтроля(Знач КоллекцияПроверок)
	Ключи = ПолучитьКлючиПроверкиКонфигурации(КоллекцияПроверок);
	
	Конфигуратор.ВыполнитьСинтаксическийКонтроль(
		Ключи["-ThinClient"],
		Ключи["-WebClient"],
		Ключи["-Server"],
		Ключи["-ExternalConnection"],
		Ключи["-ThickClientOrdinaryApplication"]);

	ЛогПроверкиИзКонфигуратора = Конфигуратор.ВыводКоманды();
	
	Возврат ЛогПроверкиИзКонфигуратора;
	
КонецФункции

Функция ПолучитьКлючиПроверкиКонфигурации(Знач КоллекцияПроверок)
	
	Ключи = Новый Соответствие;
	Если КоллекцияПроверок = Неопределено Тогда
		ФлагПоУмолчанию = Истина;
	Иначе
		ФлагПоУмолчанию = Ложь;
	КонецЕсли;
	
	Ключи.Вставить("-ThinClient", ФлагПоУмолчанию);
	Ключи.Вставить("-WebClient", ФлагПоУмолчанию);
	Ключи.Вставить("-Server", ФлагПоУмолчанию);
	Ключи.Вставить("-ExternalConnection", ФлагПоУмолчанию);
	Ключи.Вставить("-ThickClientOrdinaryApplication", ФлагПоУмолчанию);
    
	Для каждого Ключ Из КоллекцияПроверок Цикл
			Ключи[Ключ] = Истина;
	КонецЦикла;
	// Поз = Найти(ПараметрыПроверки, " ");
	// Пока Поз > 0 Цикл
		
	// 	Ключ = Лев(ПараметрыПроверки, Поз-1);
	// 	Если Не ПустаяСтрока(Ключ) Тогда
	// 		Ключи[Ключ] = Истина;
	// 	КонецЕсли;
	// 	ПараметрыПроверки = Сред(ПараметрыПроверки, Поз+1);
	// 	Поз = Найти(ПараметрыПроверки, " ");
		
	// КонецЦикла;
	
	// Если СтрДлина(СокрЛП(ПараметрыПроверки)) > 0 Тогда
	// 	Ключ = ПараметрыПроверки;
	// 	Ключи[Ключ] = Истина;
	// КонецЕсли;
	
	Возврат Ключи;
	
КонецФункции

Функция ВывестиОтчетПроверкиКонфигурацииВФорматеJUnitXML(Знач ПутьОтчетаВФорматеJUnitxml, Знач ЛогПроверкиИзКонфигуратора, Знач НетОшибок, Знач ДатаНачала) 
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ВсегоТестов = 1;
	КоличествоОшибок = ?(НетОшибок, 0, ВсегоТестов);
	ВремяВыполнения = ТекущаяДата() - ДатаНачала;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("testsuites");
	ЗаписьXML.ЗаписатьАтрибут("tests", XMLСтрока(ВсегоТестов));
	ЗаписьXML.ЗаписатьАтрибут("name", XMLСтрока("1adminka")); 
	ЗаписьXML.ЗаписатьАтрибут("time", XMLСтрока(ВремяВыполнения));
	ЗаписьXML.ЗаписатьАтрибут("failures", XMLСтрока(КоличествоОшибок));
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("testsuite");	
	ЗаписьXML.ЗаписатьАтрибут("name", "Синтаксическая проверка конфигурации");
	ЗаписьXML.ЗаписатьНачалоЭлемента("properties");	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("testcase");
	ЗаписьXML.ЗаписатьАтрибут("classname", "Тест");
	ЗаписьXML.ЗаписатьАтрибут("name", "Тест");
	ЗаписьXML.ЗаписатьАтрибут("time", XMLСтрока(ВремяВыполнения));
	
	Если НетОшибок Тогда
		ЗаписьXML.ЗаписатьАтрибут("status", "passed");
	Иначе
		ЗаписьXML.ЗаписатьАтрибут("status", "failure");
		ЗаписьXML.ЗаписатьНачалоЭлемента("failure");
		XMLОписание = XMLСтрока(ЛогПроверкиИзКонфигуратора); 
		ЗаписьXML.ЗаписатьАтрибут("message", XMLОписание);

		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); //testcase
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); //testsuites
	
	СтрокаХМЛ = ЗаписьXML.Закрыть();
	
	// ПутьОтчетаВФорматеJUnitxml = Конфигуратор.КаталогСборки() + "\check-syntax.xml";
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПутьОтчетаВФорматеJUnitxml);
	ЗаписьXML.ЗаписатьБезОбработки(СтрокаХМЛ);// таким образом файл будет записан всего один раз, и не будет проблем с обработкой на билд-сервере TeamCity
	ЗаписьXML.Закрыть();
	
	Лог.Отладка("СтрокаХМЛ %1", СтрокаХМЛ);
	
КонецФункции

// }

