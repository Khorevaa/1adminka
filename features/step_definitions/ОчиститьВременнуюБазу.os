// Реализация шагов BDD-фич/сценариев c помощью фреймворка https://github.com/artbear/1bdd

#Использовать v8runner
#Использовать tempfiles

#Использовать "..\..\src"

Перем БДД; //контекст фреймворка 1bdd

Перем Лог;
// Перем УправлениеКонфигуратором;

// Метод выдает список шагов, реализованных в данном файле-шагов
Функция ПолучитьСписокШагов(КонтекстФреймворкаBDD) Экспорт
	БДД = КонтекстФреймворкаBDD;

	ВсеШаги = Новый Массив;

	ВсеШаги.Добавить("ЯПодготовилТестовыйКаталогКакКаталогСборки");
	ВсеШаги.Добавить("СоздаюВременнуюФайловуюБазу");
	ВсеШаги.Добавить("ЯДобавляюПараметрКомандыПродукта");
	ВсеШаги.Добавить("ЯДобавляюКаталогСборкиКакПараметрКомандыПродукта");
	ВсеШаги.Добавить("ЯВыполняюКомандуПродуктаCПередачейПараметров");
	ВсеШаги.Добавить("ВременнаяБазаНеСуществует");
	ВсеШаги.Добавить("ЯДобавляюКаталогТестовогоХранилищаКакПараметрКомандыПродукта");

	Возврат ВсеШаги;
КонецФункции




// Реализация шагов

// Процедура выполняется перед запуском каждого сценария
Процедура ПередЗапускомСценария(Знач Узел) Экспорт
	
КонецПроцедуры

// Процедура выполняется после завершения каждого сценария
Процедура ПослеЗапускаСценария(Знач Узел) Экспорт
	ВременныеФайлы.Удалить();
КонецПроцедуры

//я подготовил тестовый каталог как каталог сборки
Процедура ЯПодготовилТестовыйКаталогКакКаталогСборки() Экспорт
	КаталогСборки = Новый Файл(ВременныеФайлы.СоздатьКаталог());
	БДД.СохранитьВКонтекст("КаталогСборки", КаталогСборки);
	// Лог.Отладка("Использую временный каталог "+ВременныйКаталогФичи.ПолноеИмя);
	// ПараметрыСистемы.УправлениеКонфигуратором.КаталогСборки(КаталогСборки.ПолноеИмя)
КонецПроцедуры

//установил тестовый каталог как текущий
Процедура УстановилТестовыйКаталогКакТекущий() Экспорт
	УстановитьТекущийКаталог(БДД.ПолучитьИзКонтекста("КаталогСборки").ПолноеИмя);
КонецПроцедуры

//я добавляю каталог сборки как параметр команды продукта
Процедура ЯДобавляюКаталогСборкиКакПараметрКомандыПродукта() Экспорт
	ЯДобавляюПараметрКомандыПродукта("-dir "+БДД.ПолучитьИзКонтекста("КаталогСборки").ПолноеИмя);
	// ПараметрыКоманды = БДД.ПолучитьИзКонтекста("ПараметрыКоманды");
	// Если ПараметрыКоманды = Неопределено Тогда
	// 	ПараметрыКоманды = "";
	// КонецЕсли;
	// ПараметрыКоманды = СтрШаблон("%1 -dir %2", ПараметрыКоманды, БДД.ПолучитьИзКонтекста("КаталогСборки").ПолноеИмя); 
	// БДД.СохранитьВКонтекст("ПараметрыКоманды", ПараметрыКоманды);
КонецПроцедуры

//я добавляю параметр команды продукта "Парам"
Процедура ЯДобавляюПараметрКомандыПродукта(Знач ПараметрКоманды) Экспорт
	ПараметрыКоманды = БДД.ПолучитьИзКонтекста("ПараметрыКоманды");
	Если ПараметрыКоманды = Неопределено Тогда
		ПараметрыКоманды = "";
	КонецЕсли;
	ПараметрыКоманды = СтрШаблон("%1 %2 ", ПараметрыКоманды, ПараметрКоманды); 
	БДД.СохранитьВКонтекст("ПараметрыКоманды", ПараметрыКоманды);
КонецПроцедуры

//я добавляю каталог тестового хранилища 1С как параметр команды продукта
Процедура ЯДобавляюКаталогТестовогоХранилищаКакПараметрКомандыПродукта(Знач ПарамСтрока1) Экспорт
	ЯДобавляюПараметрКомандыПродукта("-storage_dir "+КаталогТестовыхФикстур());
КонецПроцедуры

//я выполняю команду продукта "clean" c передачей параметров ""
Процедура ЯВыполняюКомандуПродуктаCПередачейПараметров(Знач Команда, Знач ПараметрыКоманды) Экспорт
	ОжидаемыйКодВозврата = 0;

	ПутьАдминки = ОбъединитьПути(КаталогИсходников(), "1adminka.os");
	ФайлАдминки = Новый Файл(ПутьАдминки);
	Ожидаем.Что(ФайлАдминки.Существует(), "Ожидаем, что скрипт админки существует, а его нет. "+ФайлАдминки.ПолноеИмя).Равно(Истина);

	// ФайлФичиИлиКаталога = Новый Файл(ИмяФичиИлиПутьКаталога);
	// Если Не ФайлФичиИлиКаталога.Существует() Тогда
	// 	ФайлФичиИлиКаталога = Новый Файл(ИмяФичиИлиПутьКаталога + ".feature");
	// КонецЕсли;
	ПараметрыКоманды = СтрШаблон("%1 %2", ПараметрыКоманды, БДД.ПолучитьИзКонтекста("ПараметрыКоманды"));

	СтрокаКоманды = СтрШаблон("oscript.exe -encoding=utf-8 %1 %2 %3", ПутьАдминки, Команда, ПараметрыКоманды);

	ТекстФайла = "";
	КодВозврата = ВыполнитьПроцесс(СтрокаКоманды, ТекстФайла);

	БДД.СохранитьВКонтекст("ТекстЛогФайлаПроцесса", ТекстФайла);

	Если КодВозврата <> ОжидаемыйКодВозврата Тогда
		ВывестиТекст(ТекстФайла);
		Ожидаем.Что(КодВозврата, "Код возврата в ЯВыполняюКомандуПродуктаCПередачейПараметров").Равно(ОжидаемыйКодВозврата);
	КонецЕсли;
КонецПроцедуры

//создаю временную файловую базу
Процедура СоздаюВременнуюФайловуюБазу() Экспорт
	УправлениеКонфигуратором = УправлениеКонфигуратором();

	Если ВременнаяБазаСуществует() Тогда
		УдалитьФайлы(УправлениеКонфигуратором.ПутьКВременнойБазе());
	КонецЕсли;

	// УправлениеКонфигуратором.СоздатьФайловуюБазу(УправлениеКонфигуратором.ПутьКВременнойБазе());
	
	Ожидаем.Что(ВременнаяБазаСуществует(), "Временной базы не должно быть в каталоге <"+УправлениеКонфигуратором.ПутьКВременнойБазе()+">").Равно(Ложь);

	УправлениеКонфигуратором.СоздатьФайловуюБазу(УправлениеКонфигуратором.ПутьКВременнойБазе());
	Сообщить(УправлениеКонфигуратором.ВыводКоманды());

	Ожидаем.Что(ВременнаяБазаСуществует(), "Временная база должна существовать").Равно(Истина);
	// УдалитьФайлы(УправлениеКонфигуратором.ПутьКВременнойБазе());
КонецПроцедуры

Функция УправлениеКонфигуратором()
	УправлениеКонфигуратором = Новый УправлениеКонфигуратором;
	УправлениеКонфигуратором.КаталогСборки(БДД.ПолучитьИзКонтекста("КаталогСборки").ПолноеИмя);
	Возврат УправлениеКонфигуратором;
КонецФункции // УправлениеКонфигуратором()

//временная база не существует
Процедура ВременнаяБазаНеСуществует() Экспорт
	УправлениеКонфигуратором = УправлениеКонфигуратором();
	Ожидаем.Что(ВременнаяБазаСуществует(), "Временной базы не должно быть в каталоге <"+УправлениеКонфигуратором.ПутьКВременнойБазе()+">").Равно(Ложь);
КонецПроцедуры


Функция ВременнаяБазаСуществует()
	Возврат УправлениеКонфигуратором().ВременнаяБазаСуществует();
КонецФункции // ВременнаяБазаСуществует()

Функция ВыполнитьПроцесс(Знач СтрокаВыполнения, ТекстВывода, Знач КодировкаПотока = Неопределено)
	Перем ПаузаОжиданияЧтенияБуфера;
	
	ПаузаОжиданияЧтенияБуфера = 10;
	МаксСчетчикЦикла = 100000;
	
	Если КодировкаПотока = Неопределено Тогда
		КодировкаПотока = КодировкаТекста.UTF8;
	КонецЕсли;
    Лог.Отладка("СтрокаКоманды "+СтрокаВыполнения);
	Процесс = СоздатьПроцесс(СтрокаВыполнения, ТекущийКаталог(), Истина,Истина, КодировкаПотока);
    Процесс.Запустить();
	
	ТекстВывода = "";
	Счетчик = 0; 
	
	Пока Не Процесс.Завершен Цикл 
		Текст = Процесс.ПотокВывода.Прочитать();
		// Лог.Отладка("Цикл ПотокаВывода "+Текст);
		Если Текст = Неопределено ИЛИ ПустаяСтрока(Текст)  Тогда 
			Прервать;
		КонецЕсли;
		ТекстВывода = ТекстВывода + Текст;

		Счетчик = Счетчик + 1;
		Если Счетчик > МаксСчетчикЦикла Тогда 
			Прервать;
		КонецЕсли;
		
		sleep(ПаузаОжиданияЧтенияБуфера);		
	КонецЦикла;
	
	Процесс.ОжидатьЗавершения();
    
	Текст = Процесс.ПотокВывода.Прочитать();
	ТекстВывода = ТекстВывода + Текст;
	Лог.Отладка(ТекстВывода);

	Возврат Процесс.КодВозврата;
КонецФункции

Процедура ВывестиТекст(Знач Строка)

	Лог.Информация("");
	Лог.Информация("  ----------------    ----------------    ----------------  ");
	Лог.Информация( Строка );
	Лог.Информация("  ----------------    ----------------    ----------------  ");
	Лог.Информация("");

КонецПроцедуры

Функция КаталогТестовыхФикстур() Экспорт
	Возврат ОбъединитьПути(КаталогТестов(), "fixtures");
КонецФункции // КаталогИсходников()

Функция КаталогТестов() Экспорт
	Возврат ОбъединитьПути(КаталогИсходников(), "tests");
КонецФункции // КаталогИсходников()

Функция КаталогИсходников() Экспорт
	КаталогПроекта = ОбъединитьПути(ТекущийСценарий().Каталог, "..", "..");
	Возврат ОбъединитьПути(КаталогПроекта, "src");
КонецФункции // КаталогИсходников()

Лог = ПараметрыСистемы.Лог;
